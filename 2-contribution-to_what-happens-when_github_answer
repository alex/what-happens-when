Now we are ready to search the link: "https://www.google.com". This link is broken into several parts : the "https" is called the protocol,  "://"is the Uniform Resource Identifier scheme separator,  "www" is the subdomain, "google" is the Second Level Domain, ."com" is the Top Level Domain(TLD) but when joined together, "google.com" is called the domain name or the root domain, or the host name.  Now the domain name is like the label of a product that we want to buy. It is for identification. It is what will link us to the websites or resources (images, documents, media etc) that we hope to see when we search for anything on our browser.  Usually, the computer does not really understand these labels. It prefers numbers and so, when we  type "https://www.google.com" and press "Enter", it is translated to some sort of numbers. This number is called IP (Internet Protocol)  address. It can be of the form, 216.58.210.142. The internet service that helps us translate this domain name to an IP address is the DNS (Domain Name System). For this translation to happen  when you hit "Enter", your device initiates a DNS request or query. Your device 's operating system plays the role of facilitating any action sent from your browser. The operating system checks through its local DNS cache records for a match, in case, if it already has a previously stored IP address that corresponds to the domain name.  If the local DNS cache does not have the required information, the operating system transports the DNS request to a recursive DNS server, also known as a resolver. If the resolver doesn't have the information, it contacts one of the root DNS servers. Note that the root DNS server contains information about several domains ending with various TLDs like .com, .net, .org etc.  Each of these TLD's have their own authoritative DNS servers. The root DNS, together with the authoritative DNS server in charge of the .com TLD, provides the IP address of the domain we want . Yes! The resolver then transports the IP address back to your device's operating system.  Note, DNS saves this IP address and several other information associated with the domain names in its records for future reasons. Now since your device's operating system knows the IP address, your browser also knows it too. 

Recall that our  link's protocol remains HTTPS,  and so our  browser's next mission is to connect to a web server. This is some sort of communication and so to ensure that this communication  between our device and the web server is reliable and orderly, the browser, with the obtained IP address first initiates a TCP ( Transmission Control Protocol) connection to a web server.  After the TCP connection is established, it goes ahead to  initiate  an HTTPS (Hypertext Transfer Protocol Secure) connection to the web server. The HTTPS connection is a secured environment needed for our HTTPS request to reach the server. This HTTP connection is obviously done within the established TCP connection. Now our request leaves the browser, passes through the Internet Protocol(IP)  entry port.  Ports are like gates with some assigned numbers on them; it receives/sends out data and so our HTTPS request goes to its assigned port number 443 (this is typical for HTTPS request only). Usually, there is a digital security guard in our device that makes sure that the IP address and port of our request is an allowed traffic. This guard is called the |Firewall. It inspects our HTTPS protocol and then permits it to reach the load balancer.


The Load-balancer is actually the first web server that our incoming HTTPS request gets to. It is a specialized web server that will help send our request/traffic to the back end servers. Right before this happens, an SSL (Secure Sockets Layer) handshake takes place. This is a process where our browser and the load balancer establishes a secure encrypted connection. They both exchange digital certificates and agree on a session key(temporary code just for the communication session). The certificate provided by the load balancer to the browser contains what is called a public key.  The browser uses this public key to encrypt(encode) the request  that it sends to the load balancer.  At this point, the load balancer receives the encrypted request  but will have to decrypt(decode) it first. It uses a corresponding key to the first key used by the browser to decrypt the request. This is called the private key and this key is known only by the load balancer. It decrypts the request and  based on the algorithm it was set to function with and also based on the IP range and the port number of the request, it forwards the decrypted request to a backend server. In essence, the load balancer sends our request to the backend server that is responsible for goggle.com on port 443.

The backend server receives the decrypted request and processes it.
Since the requested content is dynamic (a search result), the web server connects to an application server.The application server quickly  handles the dynamic and interactive aspect. It would even interact/query the database to retrieve the needed data necessary to generate the dynamic content . At the end, the generated dynamic content leaves the database and application server, back to the web server and then back to the load balancer which now encrypts it again. It encrypts the HTTPS response using the previously negotiated session key and then sends it back to the browser. The HTTPS response exits through the same port 443. The firewall inspects the HTTP response and port number and then permits it to reach the browser. Please note that communication remains seamless and reliable due to an already established TCP ( Transmission Control Protocol) connection between the browser and the servers. The browser  receives the encrypted response, decrypts it using the agreed session key, and renders the webpage for you to view the content securely. The response includes  the HTML, CSS, JavaScript, and other resources needed to render the Google webpage. This is what you see as the Google search page.

