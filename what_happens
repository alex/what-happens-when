what happens when you type https://www.google.com in your browser and press Enter
Google's search engine homepage is displayed on your screen after you type https://www.google.com into your browser address bar and hit the Enter key. To display the homepage, a number of intricate processes would have to happen in the background. In this blog post, we will explain what happens behind the scenes and how the different components work together to deliver the website.
The Domain Name System (DNS) request comes first in the process. The DNS server receives a request from your browser asking it to convert the domain name "www.google.com" into an IP address, the specific address for the server hosting the website. An IP address (Internet Protocol address) is a unique numerical identifier assigned to every device connected to the internet. It serves as a unique identifier that allows devices to communicate with each other over the internet. The DNS server first checks its cache to find www.google.com's IP address. If found, the IP address is sent back to the browser; otherwise, the DNS server searches other DNS servers until it locates the correct IP address and sends it back to the browser.
Once the browser receives the IP address, it uses the Transmission Control Protocol (TCP) to create a connection with the server. The Transmission Control Protocol (TCP), a connection-oriented protocol, is in charge of ensuring dependable communication between programs running on various internet-connected devices. TCP uses sequence numbers, acknowledgment, retransmission, flow control, and congestion control to ensure dependable data transfer. It also establishes a virtual connection between two endpoints before transmitting data. In our case, the TCP protocol will be responsible for breaking down the data into packets and reassembling them at the destination. The Internet Protocol (IP) is used to route the packets to their destination. 
Just before the connection is established, the data packets are first routed through the firewall. The firewall checks the incoming and outgoing packets for any malicious content and blocks any suspicious traffic. A firewall is a security device or software that monitors and controls the traffic that flows between an internal network and an external network, such as the internet. It enforces security policies that protect the internal network from unauthorized access, malware, and other security threats by examining each packet of data and comparing it to a set of predefined rules. Firewalls can be configured to provide different levels of protection, and they are an essential component of any network security strategy.
After the data packets successfully pass through the firewall and a connection is established, the browser initiates a handshake with the server to establish a safe and secure connection. The browser-server handshake is the process by which a web browser and a web server establish a connection and exchange information before data is transmitted between them. The handshake involves negotiating the terms of their communication and determining the encryption protocol, encoding format, and other parameters that will affect the quality and speed of the connection. Once the handshake process is complete, data can then be transmitted between the browser and server. The handshake process involves exchanging encryption keys and verifying the identity of the server using a digital certificate. After the handshake is completed, HTTPS (Hypertext Transfer Protocol Secure) and SSL (Secure Sockets Layer) then act to ensure that the data exchanged between the browser and the server is encrypted and secure.
After the handshaking and secure connection is established, the request is routed to the web server through the load balancer. A load balancer is a device or software component that distributes incoming network traffic across multiple servers in a cluster or server farm in order to improve the performance, availability, and scalability of web-based applications and services by ensuring that traffic is evenly distributed across multiple servers.
The web server upon receiving the request goes ahead to retrieve the HTML, CSS, and JavaScript files that make up the Google homepage. The server processes the request and sends the files back to the browser as a response. Once the browser receives the files from the web server, it proceeds to render the Google homepage. If the website is a dynamic one, some components of the webpage might need data to be fetched from a backend database. The browser will in such cases, send another request to the application server, which processes the request and queries the database for the necessary information. The database retrieves the required information and sends it back to the application server, which in turn sends it back to the browser. The browser then renders the webpage with the additional data fetched from the database.
In conclusion, all of the outlined complex series of processes takes place in the background in milliseconds once you hit the enter key after typing in https://www.google.com in your browser, and every component plays a crucial role in delivering the webpage to your browser. Understanding how these components work together is essential to building scalable and reliable web applications.
